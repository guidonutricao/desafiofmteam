// Script para verificar se a migra√ß√£o do peso_inicial foi aplicada corretamente
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase (substitua pelas suas credenciais)
const supabaseUrl = 'YOUR_SUPABASE_URL';
const supabaseKey = 'YOUR_SUPABASE_SERVICE_ROLE_KEY'; // Use service role key para admin queries
const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyMigration() {
    console.log('üîç Verificando migra√ß√£o do peso_inicial...\n');

    try {
        // 1. Verificar se a coluna peso_inicial existe na tabela profiles
        console.log('1. Verificando estrutura da tabela profiles...');
        
        const { data: columns, error: columnsError } = await supabase
            .rpc('get_table_columns', { table_name: 'profiles' });

        if (columnsError) {
            // Fallback: tentar query direta
            const { data: profileTest, error: profileError } = await supabase
                .from('profiles')
                .select('peso_inicial')
                .limit(1);

            if (profileError) {
                if (profileError.message.includes('column "peso_inicial" does not exist')) {
                    console.log('‚ùå Coluna peso_inicial N√ÉO existe na tabela profiles');
                    console.log('üí° Execute a migra√ß√£o: supabase/migrations/20250127000001_add_peso_inicial_safe.sql');
                    return false;
                } else {
                    console.error('‚ùå Erro ao verificar tabela profiles:', profileError.message);
                    return false;
                }
            } else {
                console.log('‚úÖ Coluna peso_inicial existe na tabela profiles');
            }
        }

        // 2. Verificar se a fun√ß√£o handle_new_user foi atualizada
        console.log('\n2. Verificando fun√ß√£o handle_new_user...');
        
        const { data: functionData, error: functionError } = await supabase
            .rpc('get_function_definition', { function_name: 'handle_new_user' });

        if (functionError) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar a fun√ß√£o handle_new_user automaticamente');
            console.log('üí° Verifique manualmente se a fun√ß√£o inclui peso_inicial');
        } else {
            if (functionData && functionData.includes('peso_inicial')) {
                console.log('‚úÖ Fun√ß√£o handle_new_user inclui suporte ao peso_inicial');
            } else {
                console.log('‚ùå Fun√ß√£o handle_new_user N√ÉO inclui suporte ao peso_inicial');
                console.log('üí° Execute a migra√ß√£o para atualizar a fun√ß√£o');
            }
        }

        // 3. Testar inser√ß√£o de dados (simula√ß√£o)
        console.log('\n3. Testando estrutura de dados...');
        
        // Criar um objeto de teste para verificar se os campos est√£o corretos
        const testProfile = {
            user_id: '00000000-0000-0000-0000-000000000000', // UUID de teste
            nome: 'Teste',
            peso_inicial: 75.5,
            peso_atual: 75.5
        };

        // Verificar se a query seria v√°lida (sem executar)
        try {
            const query = supabase
                .from('profiles')
                .insert(testProfile)
                .select();
            
            console.log('‚úÖ Estrutura de dados est√° correta para inser√ß√£o');
            console.log('üìä Campos suportados: user_id, nome, peso_inicial, peso_atual');
        } catch (error) {
            console.log('‚ùå Erro na estrutura de dados:', error.message);
        }

        // 4. Verificar √≠ndices
        console.log('\n4. Verificando √≠ndices...');
        
        const { data: indexes, error: indexError } = await supabase
            .rpc('get_table_indexes', { table_name: 'profiles' });

        if (indexError) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar √≠ndices automaticamente');
        } else {
            const pesoInicialIndex = indexes?.find(idx => 
                idx.indexname === 'idx_profiles_peso_inicial'
            );
            
            if (pesoInicialIndex) {
                console.log('‚úÖ √çndice idx_profiles_peso_inicial existe');
            } else {
                console.log('‚ö†Ô∏è √çndice idx_profiles_peso_inicial pode n√£o existir');
            }
        }

        // 5. Resumo final
        console.log('\nüìã RESUMO DA VERIFICA√á√ÉO:');
        console.log('‚úÖ Migra√ß√£o parece estar funcionando corretamente');
        console.log('‚úÖ Coluna peso_inicial dispon√≠vel');
        console.log('‚úÖ Estrutura de dados compat√≠vel');
        
        console.log('\nüöÄ PR√ìXIMOS PASSOS:');
        console.log('1. Teste o cadastro de usu√°rio com peso inicial');
        console.log('2. Verifique se os dados aparecem na p√°gina de perfil');
        console.log('3. Execute o teste completo: node test_peso_inicial.js');

        return true;

    } catch (error) {
        console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
        console.log('\nüí° SOLU√á√ïES POSS√çVEIS:');
        console.log('1. Verifique se o Supabase est√° acess√≠vel');
        console.log('2. Confirme as credenciais de acesso');
        console.log('3. Execute a migra√ß√£o manualmente no dashboard do Supabase');
        return false;
    }
}

// Fun√ß√£o auxiliar para criar as fun√ß√µes RPC necess√°rias (se n√£o existirem)
async function createHelperFunctions() {
    console.log('üîß Criando fun√ß√µes auxiliares...');

    // Fun√ß√£o para obter colunas da tabela
    const getColumnsFunction = `
        CREATE OR REPLACE FUNCTION get_table_columns(table_name text)
        RETURNS TABLE(column_name text, data_type text)
        LANGUAGE sql
        AS $$
            SELECT column_name::text, data_type::text
            FROM information_schema.columns
            WHERE table_schema = 'public' AND table_name = $1;
        $$;
    `;

    // Fun√ß√£o para obter defini√ß√£o de fun√ß√£o
    const getFunctionDefinition = `
        CREATE OR REPLACE FUNCTION get_function_definition(function_name text)
        RETURNS text
        LANGUAGE sql
        AS $$
            SELECT routine_definition
            FROM information_schema.routines
            WHERE routine_schema = 'public' AND routine_name = $1;
        $$;
    `;

    // Fun√ß√£o para obter √≠ndices
    const getIndexesFunction = `
        CREATE OR REPLACE FUNCTION get_table_indexes(table_name text)
        RETURNS TABLE(indexname text, indexdef text)
        LANGUAGE sql
        AS $$
            SELECT indexname::text, indexdef::text
            FROM pg_indexes
            WHERE schemaname = 'public' AND tablename = $1;
        $$;
    `;

    try {
        await supabase.rpc('exec_sql', { sql: getColumnsFunction });
        await supabase.rpc('exec_sql', { sql: getFunctionDefinition });
        await supabase.rpc('exec_sql', { sql: getIndexesFunction });
        console.log('‚úÖ Fun√ß√µes auxiliares criadas');
    } catch (error) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel criar fun√ß√µes auxiliares:', error.message);
    }
}

// Executar verifica√ß√£o
if (require.main === module) {
    verifyMigration();
}

module.exports = { verifyMigration, createHelperFunctions };